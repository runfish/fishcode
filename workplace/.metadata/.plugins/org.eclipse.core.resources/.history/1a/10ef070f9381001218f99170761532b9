/**
 * 
 */
package net.dfrz.supershop01.daoimpl;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.dom4j.io.OutputFormat;
import org.dom4j.io.SAXReader;
import org.dom4j.io.XMLWriter;
import net.dfrz.supershop01.dao.AdministratorDao;
import net.dfrz.supershop01.domain.Administrator;

/**
 * @author Administrator
 *
 */
public class AdministratorDaoXMLImpl implements AdministratorDao {
	
	private static final String STORE_FILE="d:/administrator.xml";

	
	/* (non-Javadoc)
	 * @see net.dfrz.supershop01.dao.AdministratorDao#save(net.dfrz.supershop01.domain.Administrator)
	 */
	public void save(Administrator administrator) {
		// TODO Auto-generated method stub
		
		File file = new File(STORE_FILE);
		
		if(!file.exists()){
			
			Document doc = DocumentHelper.createDocument();
			
			Element administratorListElement = doc.addElement("administratorList");
			
			Element administratorElement = administratorListElement.addElement("administrator");
			
			administratorElement.addAttribute("administratorId", String.valueOf(administrator.getAdministratorId()));
			administratorElement.addAttribute("administratorName", administrator.getAdministratorName());
			administratorElement.addAttribute("administratorPassword", administrator.getAdministratorPassword());
			administratorElement.addAttribute("realName", administrator.getRealName());
			administratorElement.addAttribute("birthday",administrator.getBirthday());
			administratorElement.addAttribute("telNum",administrator.getTelNum());
			administratorElement.addAttribute("address",administrator.getAddress());
			administratorElement.addAttribute("email",administrator.getEmail());
			administratorElement.addAttribute("postCode",administrator.getPostCode());
			administratorElement.addAttribute("isSuperAdministrator",String.valueOf(administrator.isSuperAdministrator()));
		
			saveDoc(doc);
		
		}
		else {
			Document doc= this.readDoc();
			Element administratorListElement = doc.getRootElement();
	        Element administratorElement = administratorListElement.addElement("administrator");
			
			administratorElement.addAttribute("administratorId", String.valueOf(administrator.getAdministratorId()));
			administratorElement.addAttribute("administratorName", administrator.getAdministratorName());
			administratorElement.addAttribute("administratorPassword", administrator.getAdministratorPassword());
			administratorElement.addAttribute("realName", administrator.getRealName());
			administratorElement.addAttribute("birthday",administrator.getBirthday());
			administratorElement.addAttribute("telNum",administrator.getTelNum());
			administratorElement.addAttribute("address",administrator.getAddress());
			administratorElement.addAttribute("email",administrator.getEmail());
			administratorElement.addAttribute("postCode",administrator.getPostCode());
			administratorElement.addAttribute("isSuperAdministrator",String.valueOf(administrator.isSuperAdministrator()));
		
			saveDoc(doc);
		}


	}
	/* (non-Javadoc)
	 * @see net.dfrz.supershop01.dao.AdministratorDao#delete(net.dfrz.supershop01.domain.Administrator)
	 */
	public void delete(String adminName) {
		// TODO Auto-generated method stub
		
		Document doc=this.readDoc();
		List administrators=doc.selectNodes("/administratorList/administrator[@administratorName='"+adminName+"']");
		
		for(int i=0;i<administrators.size();i++){
			Element e=(Element)administrators.get(i);
			e.detach();
		}
		
		this.saveDoc(doc);
		
		
	}



	/* (non-Javadoc)
	 * @see net.dfrz.supershop01.dao.AdministratorDao#getAdministratorById(java.lang.Integer)
	 */
	public Administrator getAdministratorByName(String administratorName) {
		// TODO Auto-generated method stub
		Document doc=this.readDoc();
		
		List administrators=doc.selectNodes("/administratorList/administrator[@administratorName='"+administratorName+"']");
		
		Element administratorElement=(Element)administrators.get(0);
		
		Administrator administrator = new Administrator();
		
		administrator.setAdministratorId(Integer.parseInt(administratorElement.attribute("administratorId").getValue()));
		administrator.setAdministratorName(administratorElement.attribute("administratorName").getValue());
		administrator.setAdministratorPassword(administratorElement.attribute("administratorPassword").getValue());
		administrator.setRealName(administratorElement.attribute("realName").getValue());
		administrator.setBirthday(administratorElement.attribute("birthday").getValue());
		administrator.setTelNum(administratorElement.attribute("telNum").getValue());
        administrator.setAddress(administratorElement.attribute("address").getValue());
		administrator.setEmail(administratorElement.attribute("email").getValue());
		administrator.setPostCode(administratorElement.attribute("postCode").getValue());
		administrator.setSuperAdministrator(Boolean.parseBoolean(administratorElement.attribute("isSuperAdministrator").getValue()));
		
		
		return administrator;
	}

	/* (non-Javadoc)
	 * @see net.dfrz.supershop01.dao.AdministratorDao#loadAll()
	 */
	public List<Administrator> loadAll() {
		// TODO Auto-generated method stub
		Document doc=this.readDoc();
		
		List administrators=doc.selectNodes("//administrator");
		
		List<Administrator> booklist=new ArrayList<Administrator>();
		for(int i=0;i<administrators.size();i++)
		{
			Element administratorElement=(Element)administrators.get(i);
			Administrator administrator = new Administrator();
			administrator.setAdministratorId(Integer.parseInt(administratorElement.attribute("administratorId").getValue()));
			administrator.setAdministratorName(administratorElement.attribute("administratorName").getValue());
			administrator.setAdministratorPassword(administratorElement.attribute("administratorPassword").getValue());
			administrator.setRealName(administratorElement.attribute("realName").getValue());
			administrator.setBirthday(administratorElement.attribute("birthday").getValue());
			administrator.setTelNum(administratorElement.attribute("telNum").getValue());
	        administrator.setAddress(administratorElement.attribute("address").getValue());
			administrator.setEmail(administratorElement.attribute("email").getValue());
			administrator.setPostCode(administratorElement.attribute("postCode").getValue());
			administrator.setSuperAdministrator(Boolean.parseBoolean(administratorElement.attribute("isSuperAdministrator").getValue()));

			
			booklist.add(administrator);
		}
		return booklist;
	}



	/* (non-Javadoc)
	 * @see net.dfrz.supershop01.dao.AdministratorDao#update(net.dfrz.supershop01.domain.Administrator)
	 */
	public void update(Administrator administrator) {
		// TODO Auto-generated method stub
		Document doc=this.readDoc();
		
		List administrators=doc.selectNodes("/administratorList/administrator[@administratorId='"+administrator.getAdministratorId()+"']");
		
		Element administratorElement=(Element)administrators.get(0);
		administratorElement.attribute("administratorId").setValue(String.valueOf(administrator.getAdministratorId()));
		administratorElement.attribute("administratorName").setValue(administrator.getAdministratorName());
		administratorElement.attribute("administratorPassword").setValue(administrator.getAdministratorPassword());
		administratorElement.attribute("realName").setValue(administrator.getRealName());
		administratorElement.attribute("birthday").setValue(administrator.getBirthday());
		administratorElement.attribute("telNum").setValue(administrator.getTelNum());
		administratorElement.attribute("address").setValue(administrator.getAddress());
		administratorElement.attribute("email").setValue(administrator.getEmail());
		administratorElement.attribute("postCode").setValue(administrator.getPostCode());
		administratorElement.attribute("isSuperAdministrator").setValue(String.valueOf(administrator.isSuperAdministrator()));
		
		this.saveDoc(doc);

	}
	/**
	 * 把一个内存中的document对象保存成xml文件
	 * @param doc
	 */
	private void saveDoc(Document doc) {

		File f = new File(STORE_FILE);
		XMLWriter writer=null;
		
		OutputFormat of =OutputFormat.createPrettyPrint(); //美化xml数据的格式
		//of.setEncoding("utf-8");
		
		try {
			writer = new XMLWriter(new FileWriter(f),of);
			writer.write(doc);
			writer.flush();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			try {
				writer.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	
	
	private Document readDoc() {
		// TODO Auto-generated method stub
		File f = new File(STORE_FILE);
		SAXReader reader = new SAXReader();
		
		Document doc = null;
		
		try {
			FileInputStream fis = new FileInputStream(f);
			InputStreamReader iReader = new InputStreamReader(fis);
			doc = reader.read(iReader);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (DocumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		return doc;
	}
}
