/**
 * 
 */
package net.dfrz.supershop01.daoimpl;

import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import net.dfrz.supershop01.dao.GoodsDao;
import net.dfrz.supershop01.domain.Category;
import net.dfrz.supershop01.domain.Goods;
import net.dfrz.supershop01.exception.DataAccessException;
import net.dfrz.supershop01.servicesimpl.GoodsQueryHelper;
import net.dfrz.supershop01.utils.DBUtils;


/**
 * @author YDP1205
 *
 */
public class GoodsDaoJDBCImpl implements GoodsDao {


	private static final String SQL_GETPIC = "select goods_image from goods where goods_id=?";
	private static final String GET_GOODSBYID = "select * from goods where goods_id=?";
	private static final String LOADALL = "select * from goods order by goods_id desc";
	private static final String GET_SUBCTGS="select * from category where category_pid=?";
	private static final String GET_GOODS_BY_BIG_CTG_ID = "select * from small_category,goods where b_ctg_id=? and "
		                                                  +"small_category.s_ctg_id = goods.goods_ctg_id";
	private static final String GET_GOODS_BY_SUB_CTG_ID = "select * from goods where goods_ctg_id = ?";
	
	
    public List<Goods> getScopedGoods(GoodsQueryHelper helper,int beginIndex, int endIndex) {
		
		Connection conn=DBUtils.getInstance().getConn();
		PreparedStatement pstmt=null; 
		ResultSet rset=null;
		List<Goods> goodsList=null;
		
		String sql="select * from ( select rownum rn,a.* from ( "+ this.buildSqlByHelper(helper)+" ) a where rownum<=? ) where rn>=?";
		
		System.out.println(sql);
		
		try {
			
			pstmt=conn.prepareStatement(sql);
			pstmt.setInt(1,endIndex);
			pstmt.setInt(2, beginIndex);
			rset=pstmt.executeQuery();
			
			goodsList=new ArrayList<Goods>();

			
			while(rset.next()){
				Goods goods = new Goods();
				
				goods.setGoodsId(rset.getInt("goods_id"));
				goods.setGoodsName(rset.getString("goods_name"));
				goods.setGoodsPrice(rset.getDouble("goods_price"));
				goods.setGoodsIsEmpty(rset.getInt("goods_empty"));
				goods.setGoodsDesc(rset.getString("goods_desc"));
				goods.setGoodsQty(rset.getInt("goods_qty"));
				goods.setGoodsCtgId(rset.getInt("goods_ctg_id"));
				goods.setGoodsAdminId(rset.getInt("goods_admin_id"));
				
			
				goodsList.add(goods);
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new DataAccessException("商品信息列表获取失败！如果多次出现，请联系系统管理员。");
		} finally{
			DBUtils.getInstance().ReleaseRes(conn, pstmt, rset);
		}			
		return goodsList;
	}
	
    private String buildSqlByHelper3(GoodsQueryHelper helper){
  		
  		String sql=GET_GOODS_BY_SUB_CTG_ID;
  		
  		if(helper.getGoodsName()!=null&&helper.getGoodsName().trim().length()>0)
  		{
  			sql+=" and goods_name like '%"+helper.getGoodsName()+"%'";
  		}
  		if (helper.getGoodsCtgId()!=null)
  		{
			sql+=" and goods_ctg_id="+helper.getGoodsCtgId();
		}
  		if(helper.getGoodsIsEmpty()!=null && helper.getGoodsIsEmpty().trim().length()>0)
  		{
  			sql+=" and goods_empty='"+helper.getGoodsIsEmpty()+"'";
  		}
  		if(helper.getMinGoodsPrice()!=null){
  			
  			sql+="and goods_price >="+helper.getMinGoodsPrice();
  		}
  		if(helper.getMaxGoodsPrice()!=null){
  			sql+="and goods_price <="+helper.getMaxGoodsPrice();
  		}
  		sql+=" order by goods_id";
 
  		return sql;
  		
  	}
    
    private String buildSqlByHelper2(GoodsQueryHelper helper){
  		
  		String sql=GET_GOODS_BY_BIG_CTG_ID;
  		
  		if(helper.getGoodsName()!=null&&helper.getGoodsName().trim().length()>0)
  		{
  			sql+=" and goods_name like '%"+helper.getGoodsName()+"%'";
  		}
  		if (helper.getGoodsCtgId()!=null)
  		{
			sql+=" and goods_ctg_id="+helper.getGoodsCtgId();
		}
  		if(helper.getGoodsIsEmpty()!=null && helper.getGoodsIsEmpty().trim().length()>0)
  		{
  			sql+=" and goods_empty='"+helper.getGoodsIsEmpty()+"'";
  		}
  		if(helper.getMinGoodsPrice()!=null){
  			
  			sql+="and goods_price >="+helper.getMinGoodsPrice();
  		}
  		if(helper.getMaxGoodsPrice()!=null){
  			sql+="and goods_price <="+helper.getMaxGoodsPrice();
  		}
  		sql+=" order by goods_id";
 
  		return sql;
  		
  	}
    
    private String buildSqlByHelper(GoodsQueryHelper helper){
  		
  		String sql="select * from goods where 1=1";
  		
  		if(helper.getGoodsName()!=null&&helper.getGoodsName().trim().length()>0)
  		{
  			sql+=" and goods_name like '%"+helper.getGoodsName()+"%'";
  		}
  		if (helper.getGoodsCtgId()!=null)
  		{
			sql+=" and goods_ctg_id="+helper.getGoodsCtgId();
		}
  		if(helper.getGoodsIsEmpty()!=null && helper.getGoodsIsEmpty().trim().length()>0)
  		{
  			sql+=" and goods_empty='"+helper.getGoodsIsEmpty()+"'";
  		}
  		if(helper.getMinGoodsPrice()!=null){
  			
  			sql+="and goods_price >="+helper.getMinGoodsPrice();
  		}
  		if(helper.getMaxGoodsPrice()!=null){
  			sql+="and goods_price <="+helper.getMaxGoodsPrice();
  		}
  		sql+=" order by goods_id";
 
  		return sql;
  		
  	}
    
    public byte[] getGoodsImage(Integer goodsId) {
		
		Connection conn=DBUtils.getInstance().getConn();
		PreparedStatement pstmt=null;
		ResultSet rset=null;
		byte[] goodsImage=null;
		
		try{
		
		   pstmt=conn.prepareStatement(SQL_GETPIC);
		   pstmt.setInt(1, goodsId);
		   rset=pstmt.executeQuery();
		   
		   
		   if(rset.next())
		   {
			   java.sql.Blob blob = rset.getBlob("goods_image");
			   if(blob!=null){
			    InputStream inStream = blob.getBinaryStream();
			    goodsImage = new byte[(int) blob.length()];
				inStream.read(goodsImage);
				inStream.close();	
			   }
		   }
		   		
		}catch(Exception e)
		{
			e.printStackTrace();
	
			throw new DataAccessException("商品图片获取失败,如果多次出现,请及时联系系统管理员。");
		}finally{
			DBUtils.getInstance().ReleaseRes(conn, pstmt, rset);
		}
		return goodsImage;
	}
    
    
   public int countGoods(GoodsQueryHelper helper) {
		
		String sql=this.buildSqlByHelper(helper);
		sql=sql.replace("*", "count(*) total");
		sql=sql.substring(0, sql.indexOf("order"));
		
		Connection conn=DBUtils.getInstance().getConn();
		PreparedStatement pstmt=null;
		ResultSet rset=null;
		Integer total=null;
		
		try{
		   pstmt=conn.prepareStatement(sql);
		   rset=pstmt.executeQuery();
		   
		   if(rset.next()){
			  total=rset.getInt("total"); 
		   }
		}catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		throw new DataAccessException("商品数量统计查询失败,如果多次出现,请及时联系系统管理员。");
		}finally{
			DBUtils.getInstance().ReleaseRes(conn, pstmt, rset);
		}	
		
		return total;
	}
   
   public int countGoods(GoodsQueryHelper helper,int ctgId) {
		
		String sql=this.buildSqlByHelper2(helper);
		sql=sql.replace("*", "count(*) total");
		sql=sql.substring(0, sql.indexOf("order"));
		
		Connection conn=DBUtils.getInstance().getConn();
		PreparedStatement pstmt=null;
		ResultSet rset=null;
		Integer total=null;
		
		try{
		   pstmt=conn.prepareStatement(sql);
		   pstmt.setInt(1, ctgId);
		   rset=pstmt.executeQuery();
		   
		   if(rset.next()){
			  total=rset.getInt("total"); 
		   }
		}catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		throw new DataAccessException("商品数量统计查询失败,如果多次出现,请及时联系系统管理员。");
		}finally{
			DBUtils.getInstance().ReleaseRes(conn, pstmt, rset);
		}	
		
		return total;
	}



 public Goods getGoodsById(Integer goodsId) {
	// TODO Auto-generated method stub
	Connection conn = DBUtils.getInstance().getConn();
	PreparedStatement pstmt=null;
	ResultSet rset = null;
	Goods goods = null;
	
	try {
		pstmt = conn.prepareStatement(GET_GOODSBYID);
		pstmt.setInt(1, goodsId);
		rset=pstmt.executeQuery();
	
		
		while(rset.next()){
			goods = new Goods();
			goods.setGoodsId(goodsId);
			goods.setGoodsName(rset.getString("goods_name"));
			goods.setGoodsPrice(rset.getDouble("goods_price"));
			goods.setGoodsIsEmpty(rset.getInt("goods_empty"));
			goods.setGoodsDesc(rset.getString("goods_desc"));
			goods.setGoodsQty(rset.getInt("goods_qty"));
			goods.setGoodsCtgId(rset.getInt("goods_ctg_id"));
			goods.setGoodsAdminId(rset.getInt("goods_admin_id"));
			goods.setGoodsImage(this.getGoodsImage(rset.getInt("goods_id")));
			
		}
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
		throw new DataAccessException("商品信息提取失败，如果多次出现,请及时联系系统管理员。");
	}finally{
		
		DBUtils.getInstance().ReleaseRes(conn, pstmt, rset);
	}
	
	return goods;
}


public List<Goods> loadAll() {
	// TODO Auto-generated method stub
	Connection conn=DBUtils.getInstance().getConn();
	PreparedStatement pstmt=null; 
	ResultSet rset=null;
	List<Goods> goodsList=null;
	
	try {
		
		pstmt=conn.prepareStatement(LOADALL);
		rset=pstmt.executeQuery();
		
		goodsList=new ArrayList<Goods>();

		
		while(rset.next()){
			Goods goods = new Goods();
			
			goods.setGoodsId(rset.getInt("goods_id"));
			goods.setGoodsName(rset.getString("goods_name"));
			goods.setGoodsPrice(rset.getDouble("goods_price"));
			goods.setGoodsIsEmpty(rset.getInt("goods_empty"));
			goods.setGoodsDesc(rset.getString("goods_desc"));
			goods.setGoodsQty(rset.getInt("goods_qty"));
			goods.setGoodsCtgId(rset.getInt("goods_ctg_id"));
			goods.setGoodsAdminId(rset.getInt("goods_admin_id"));
			goodsList.add(goods);
		}
		
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
		throw new DataAccessException("获取所有商品失败！如果多次出现,请及时联系系统管理员。");
	} finally{
		DBUtils.getInstance().ReleaseRes(conn, pstmt, rset);
	}			
	return goodsList;
}


public List<Category> getSubCtgs(int ctgPid) {
	// TODO Auto-generated method stub
	Connection conn=DBUtils.getInstance().getConn();
	PreparedStatement pstmt=null;
	ResultSet rset=null;
	List<Category> subCtgs=null;
	
	try {
		
		pstmt=conn.prepareStatement(GET_SUBCTGS);
		pstmt.setInt(1, ctgPid);
        rset=pstmt.executeQuery();
        
        subCtgs=new ArrayList<Category>();
        
        while(rset.next()){
        	
        	Category ctg=new Category();
        	ctg.setCtgId(rset.getInt("category_id"));
        	ctg.setCtgName(rset.getString("category_name"));
        	subCtgs.add(ctg);
        	
        }
		
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
		throw new DataAccessException("获取商品大类别失败,如果多次出现,请及时联系系统管理员。");
	}finally{
		DBUtils.getInstance().ReleaseRes(conn, pstmt, rset);
	}
	
	return subCtgs;
}


public List<Goods> getListGoodsByBigCtgId(GoodsQueryHelper helper,int beginIndex, int endIndexint ,int ctgid) {
	// TODO Auto-generated method stub
	Connection conn=DBUtils.getInstance().getConn();
	PreparedStatement pstmt=null; 
	ResultSet rset=null;
	List<Goods> goodsList=null;
	String sql="select * from ( select rownum rn,a.* from ( "+ this.buildSqlByHelper2(helper)+" ) a where rownum<=? ) where rn>=?";
	try {
		
		pstmt=conn.prepareStatement(sql);
		pstmt.setInt(1, ctgid);
		pstmt.setInt(2, beginIndex);
		pstmt.setInt(3, endIndexint);
		rset=pstmt.executeQuery();
		
		goodsList=new ArrayList<Goods>();

		
		while(rset.next()){
			Goods goods = new Goods();
			
			goods.setGoodsId(rset.getInt("goods_id"));
			goods.setGoodsName(rset.getString("goods_name"));
			goods.setGoodsPrice(rset.getDouble("goods_price"));
			goods.setGoodsIsEmpty(rset.getInt("goods_empty"));
			goods.setGoodsDesc(rset.getString("goods_desc"));
			goods.setGoodsQty(rset.getInt("goods_qty"));
			goods.setGoodsCtgId(rset.getInt("goods_ctg_id"));
			goods.setGoodsAdminId(rset.getInt("goods_admin_id"));
			goodsList.add(goods);
		}
		
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
		throw new DataAccessException("获取所有商品失败！如果多次出现,请及时联系系统管理员。");
	} finally{
		DBUtils.getInstance().ReleaseRes(conn, pstmt, rset);
	}			
	return goodsList;
	
}

public List<Goods> getScopeListGoodsByBigCtgId(GoodsQueryHelper helper,
		int beginIndex, int endIndex, int ctgid) {
	// TODO Auto-generated method stub
	Connection conn=DBUtils.getInstance().getConn();
	PreparedStatement pstmt=null; 
	ResultSet rset=null;
	List<Goods> goodsList=null;
	
	String sql="select * from ( select rownum rn,a.* from ( "+ this.buildSqlByHelper2(helper)+" ) a where rownum<=? ) where rn>=?";
	
	System.out.println(sql);
	
	try {
		
		pstmt=conn.prepareStatement(sql);
		pstmt.setInt(1, ctgid);
		pstmt.setInt(2,endIndex);
		pstmt.setInt(3, beginIndex);
		rset=pstmt.executeQuery();
		
		goodsList=new ArrayList<Goods>();

		
		while(rset.next()){
			Goods goods = new Goods();
			
			goods.setGoodsId(rset.getInt("goods_id"));
			goods.setGoodsName(rset.getString("goods_name"));
			goods.setGoodsPrice(rset.getDouble("goods_price"));
			goods.setGoodsIsEmpty(rset.getInt("goods_empty"));
			goods.setGoodsDesc(rset.getString("goods_desc"));
			goods.setGoodsQty(rset.getInt("goods_qty"));
			goods.setGoodsCtgId(rset.getInt("goods_ctg_id"));
			goods.setGoodsAdminId(rset.getInt("goods_admin_id"));
			
		
			goodsList.add(goods);
		}
		
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
		throw new DataAccessException("商品信息列表获取失败！如果多次出现，请联系系统管理员。");
	} finally{
		DBUtils.getInstance().ReleaseRes(conn, pstmt, rset);
	}			
	return goodsList;

}




public List<Goods> getScopeListGoodsBySubCtgId(GoodsQueryHelper helper,
		int beginIndex, int endIndex, int subctgid) {
	// TODO Auto-generated method stub
	Connection conn=DBUtils.getInstance().getConn();
	PreparedStatement pstmt=null; 
	ResultSet rset=null;
	List<Goods> goodsList=null;
	
	try {
		
		pstmt=conn.prepareStatement(GET_GOODS_BY_SUB_CTG_ID);
		pstmt.setInt(1, subctgid);
		rset=pstmt.executeQuery();
		
		goodsList=new ArrayList<Goods>();

		
		while(rset.next()){
			Goods goods = new Goods();
			
			goods.setGoodsId(rset.getInt("goods_id"));
			goods.setGoodsName(rset.getString("goods_name"));
			goods.setGoodsPrice(rset.getDouble("goods_price"));
			goods.setGoodsIsEmpty(rset.getInt("goods_empty"));
			goods.setGoodsDesc(rset.getString("goods_desc"));
			goods.setGoodsQty(rset.getInt("goods_qty"));
			goods.setGoodsCtgId(rset.getInt("goods_ctg_id"));
			goods.setGoodsAdminId(rset.getInt("goods_admin_id"));
			goodsList.add(goods);
		}
		
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
		throw new DataAccessException("获取所有商品失败！如果多次出现,请及时联系系统管理员。");
	} finally{
		DBUtils.getInstance().ReleaseRes(conn, pstmt, rset);
	}			
	return goodsList;
}

    
    
    

}
