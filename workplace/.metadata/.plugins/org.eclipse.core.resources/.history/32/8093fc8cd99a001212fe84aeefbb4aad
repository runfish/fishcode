package net.dfrz.io.thread;

class SaleTicket implements Runnable {

	private int tickets = 500;
	private boolean falg = true;

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Thread#run()
	 */
	@Override
	public void run() {

		if (falg == true) {
			while (tickets > 0) {
				synchronized (this) {
					if (tickets > 0) {
						try {
							Thread.sleep(10);
							System.out.println(Thread.currentThread().getName()
									+ "......sale....this....." + tickets--);
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

					}
				}
			}
		}
		
		else
			sale();
	}

	public synchronized void sale() {

		if (tickets > 0) {
			try {
				Thread.sleep(10);
				System.out.println(Thread.currentThread().getName()
						+ "......sale.. function..." + tickets--);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}

	}

}

public class SaleDemo {

	public static void main(String[] args) {
		SaleTicket s1 = new SaleTicket();
		SaleTicket s2 = new SaleTicket();

		Thread t1 = new Thread(s1);
		Thread t2 = new Thread(s1);
//		Thread t3 = new Thread(s1);
//		Thread t4 = new Thread(s1);
//		Thread t5 = new Thread(s1);
		// SaleTicket s2 = new SaleTicket();
		// SaleTicket s3 = new SaleTicket();
		// SaleTicket s4 = new SaleTicket();
		// SaleTicket s5 = new SaleTicket();

		// s1.start();
		// s1.start();
		// s1.start();
		// s1.start();
		t1.start();
		try {
			Thread.sleep(10);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		t2.start();
//		t3.start();
//		t4.start();
//		t5.start();

	}

}
