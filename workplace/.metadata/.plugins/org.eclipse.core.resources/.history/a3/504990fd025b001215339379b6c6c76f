package net.dfrz.supershop01.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.dfrz.supershop01.domain.Category;
import net.dfrz.supershop01.domain.Goods;
import net.dfrz.supershop01.exception.ApplicationException;
import net.dfrz.supershop01.services.CategoryService;
import net.dfrz.supershop01.services.GoodsService;
import net.dfrz.supershop01.servicesimpl.CategoryServiceImpl;
import net.dfrz.supershop01.servicesimpl.GoodsQueryHelper;
import net.dfrz.supershop01.servicesimpl.GoodsServiceImpl;
import net.dfrz.supershop01.utils.Page;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.lang3.StringUtils;

public class GoodsServlet extends HttpServlet {

	/**
	 * Constructor of the object.
	 */
	public GoodsServlet() {
		super();
	}

	/**
	 * The doGet method of the servlet. <br>
	 *
	 * This method is called when a form has its tag value method equals to get.
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	public void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		request.setCharacterEncoding("utf-8");
		File tempFile = new File(System.getProperty("java.io.tmpdir"));
		
		DiskFileItemFactory factory = new DiskFileItemFactory();
		factory.setSizeThreshold(4096);
		factory.setRepository(tempFile);//ÁÙÊ±´æ´¢Ä¿Â¼
		
		ServletFileUpload sfu = new ServletFileUpload(factory);
		sfu.setSizeMax(5000000);
		
		List<FileItem> fileItems = null;
		
		String act = null;
		
		if(sfu.isMultipartContent(request)){
			
			try {
				fileItems=sfu.parseRequest(request);
				for(FileItem item:fileItems){
					if(item.isFormField() && item.getFieldName().equals("act")){
						
						act = item.getString("utf-8");
						break;
					}
				}
				
			} catch (FileUploadException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}
		else
			act = request.getParameter("act").trim();
		
		if("input".equals(act)){
			
			CategoryService categoryService = new CategoryServiceImpl();
			request.setAttribute("categoryList",categoryService.loadAll());
			request.getRequestDispatcher("/jsps/goods/input_goods.jsp").forward(request, response);
			
		}
		else if("create".equals(act)){
		
			Goods goods = new Goods();
			for(FileItem item:fileItems){
				if(item.isFormField() && item.getFieldName().equals("goodsname"))
					goods.setGoodsName(item.getString("utf-8"));
				else if(item.isFormField() && item.getFieldName().equals("act"))
					continue;
				else if(item.isFormField() && item.getFieldName().equals("goodsprice"))
					goods.setGoodsPrice(Integer.parseInt(item.getString("utf-8")));
				else if(item.isFormField() && item.getFieldName().equals("goodsctgid")){
					int i = Integer.parseInt(item.getString("utf-8"));
					goods.setGoodsCtgId(Integer.parseInt(item.getString("utf-8")));
					goods.setGoodsAdminId(1);
					
				}
				else if(item.isFormField() && item.getFieldName().equals("goodsqty")){
					int cnt = Integer.parseInt(item.getString("utf-8"));
					if(cnt==0){
						goods.setGoodsIsEmpty(0);
						goods.setGoodsQty(cnt);
					}
					else{
						goods.setGoodsIsEmpty(1);
						goods.setGoodsQty(cnt);
					}
				}
				else if(!item.isFormField() && item.getFieldName().equals("goodsimage")){
					byte[] goodsImage = new byte [(int)item.getSize()];
					item.getInputStream().read(goodsImage, 0, (int)item.getSize());
					goods.setGoodsImage(goodsImage);
				}
				else if(item.isFormField() && item.getFieldName().equals("goodsdesc"))
					goods.setGoodsDesc(item.getString("utf-8"));
				
			}
			    GoodsService goodsService = new GoodsServiceImpl();
			   try {
				     goodsService.addGoods(goods);
			       } catch (ApplicationException e) {
				//e.printStackTrace();
				   request.setAttribute("err", e.getMessage());
				   request.getRequestDispatcher("../jsps/goods/input_goods.jsp").forward(request, response);
				   return;
				// TODO: handle exception
			}
			       response.sendRedirect("goodsMgr?act=loadPageGoods");
		}
		else if("loadPageGoods".equals(act)){
			Integer pageNo=null;
			GoodsQueryHelper helper=new GoodsQueryHelper();
			CategoryService ctgService=new CategoryServiceImpl();
			List<Category>ctgList=ctgService.loadAll();
		
			if(StringUtils.isNotEmpty(request.getParameter("qurygoodsname")))
			{
				helper.setGoodsName(request.getParameter("qurygoodsname"));
			}
			if(StringUtils.isNotEmpty(request.getParameter("qurygoodsctgid")))
			{
				helper.setGoodsCtgId(Integer.parseInt(request.getParameter("quryctgid")));
			}
			String minPrice = request.getParameter("qurymingoodsprice");
			String maxPrice = request.getParameter("qurymaxgoodsprice");
			if(StringUtils.isNotEmpty(minPrice)){
				helper.setMinGoodsPrice(Double.parseDouble(minPrice));
			}
			if(StringUtils.isNotEmpty(maxPrice)){
				helper.setMinGoodsPrice(Double.parseDouble(maxPrice));
			}
			if(StringUtils.isNotEmpty(request.getParameter("qurygoodsempty"))){
				helper.setGoodsIsEmpty(request.getParameter("qurygoodsempty"));
			}
			
			if(request.getParameter("pageNo")!=null){
			   pageNo=Integer.parseInt(request.getParameter("pageNo"));	
			}
			
			Page page=new Page();
			if(pageNo!=null)  page.setPageNo(pageNo);
			
			GoodsService goodService=new GoodsServiceImpl();
			page=goodService.loadPagedGoods(page,helper);
			
			request.setAttribute("ctglist", ctgList);
			request.setAttribute("pagedGoods", page);
			
			request.getRequestDispatcher("/jsps/goods/list_goods.jsp").forward(request, response);
		}
		else if("getimage".equals(act)){
			int goodsId = Integer.parseInt(request.getParameter("goodsid"));
			GoodsService goodsService = new GoodsServiceImpl();
			byte[] goodsImage = goodsService.loadGoodsImageById(goodsId);
			
			response.setContentType("image/jpeg");
			
			ServletOutputStream sos = response.getOutputStream(); 
			
			if(goodsImage!=null && goodsImage.length>0){
				sos.write(goodsImage);
			}
			else{
				String relPath = request.getRealPath("/")+"pics/default.jpg";
				FileInputStream fis = new FileInputStream(relPath);
				byte [] defaultImage = new byte[fis.available()];
				fis.read(defaultImage);
				sos.write(defaultImage);
				fis.close();
			}
			sos.flush();
			sos.close();
			
		}
		
		
		
		
		
	}

	/**
	 * The doPost method of the servlet. <br>
	 *
	 * This method is called when a form has its tag value method equals to post.
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	public void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		doGet(request, response);
		

	}

}
